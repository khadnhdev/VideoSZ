const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const Video = require('../models/Video');
const AudioService = require('../services/audioService');
const transcriptionService = require('../services/transcriptionService');
const summaryService = require('../services/summaryService');
const detailService = require('../services/detailService');
const marked = require('marked');

// ƒê·∫£m b·∫£o th∆∞ m·ª•c uploads t·ªìn t·∫°i
const uploadDir = path.join('public', 'uploads');
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

// C·∫•u h√¨nh multer ƒë·ªÉ upload file
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'public/uploads/');
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  limits: { fileSize: 100 * 1024 * 1024 }, // 100MB limit
  fileFilter: function (req, file, cb) {
    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
    if (!file.originalname.match(/\.(mp4|avi|mov|flv|wmv)$/)) {
      return cb(new Error('Ch·ªâ cho ph√©p t·∫£i l√™n file video!'), false);
    }
    cb(null, true);
  }
});

// Trang ch·ªß
router.get('/', (req, res) => {
  res.render('index');
});

// Upload video
router.post('/upload', upload.single('video'), async (req, res) => {
  console.log('=== B·∫ÆT ƒê·∫¶U UPLOAD VIDEO ===');
  try {
    if (!req.file) {
      console.log('‚ùå UPLOAD TH·∫§T B·∫†I: Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c upload');
      return res.status(400).json({ error: 'Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c upload' });
    }

    console.log(`üìÅ File ƒë√£ upload: ${req.file.originalname}`);
    console.log(`üìÇ ƒê∆∞·ªùng d·∫´n l∆∞u tr·ªØ: ${req.file.path}`);
    console.log(`üìä K√≠ch th∆∞·ªõc: ${(req.file.size / (1024 * 1024)).toFixed(2)} MB`);

    // L∆∞u th√¥ng tin video v√†o database - ƒë·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë∆∞·ª£c chu·∫©n h√≥a
    const videoData = {
      originalFilename: req.file.originalname,
      videoPath: req.file.path.replace(/\\/g, '/') // Chu·∫©n h√≥a ƒë∆∞·ªùng d·∫´n
    };
    
    console.log('üíæ ƒêang l∆∞u th√¥ng tin video v√†o database...');
    const video = await Video.create(videoData);
    console.log(`‚úÖ L∆∞u th√¥ng tin video th√†nh c√¥ng. ID: ${video.id}`);
    
    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang x·ª≠ l√Ω
    res.json({ 
      success: true, 
      message: 'Upload th√†nh c√¥ng', 
      videoId: video.id 
    });
    console.log('=== K·∫æT TH√öC UPLOAD VIDEO ===');
  } catch (error) {
    console.error('‚ùå L·ªñI KHI UPLOAD:', error);
    res.status(500).json({ error: 'L·ªói khi upload file' });
  }
});

// X·ª≠ l√Ω video (convert, transcribe, summary)
router.post('/process/:videoId', async (req, res) => {
  const { videoId } = req.params;
  console.log(`\n=== B·∫ÆT ƒê·∫¶U X·ª¨ L√ù VIDEO (ID: ${videoId}) ===`);
  
  try {
    // Chuy·ªÉn video sang audio
    console.log('üé¨ B∆Ø·ªöC 1: ƒêang chuy·ªÉn ƒë·ªïi video sang audio...');
    const audioPath = await AudioService.convertVideoToAudio(videoId);
    console.log(`‚úÖ Chuy·ªÉn ƒë·ªïi audio th√†nh c√¥ng: ${audioPath}`);
    
    // Transcribe audio
    console.log('\nüéôÔ∏è B∆Ø·ªöC 2: ƒêang transcribe audio...');
    const transcript = await transcriptionService.transcribeAudio(videoId);
    console.log(`‚úÖ Transcribe th√†nh c√¥ng (${transcript.length} k√Ω t·ª±)`);
    console.log(`üìù ƒêo·∫°n ƒë·∫ßu transcript: "${transcript.substring(0, 100)}..."`);
    
    // Summary transcript
    console.log('\nüìä B∆Ø·ªöC 3: ƒêang t·∫°o summary t·ª´ transcript...');
    const summary = await summaryService.summarizeTranscript(videoId);
    console.log(`‚úÖ Summary th√†nh c√¥ng (${summary.length} k√Ω t·ª±)`);
    
    res.json({ 
      success: true, 
      message: 'X·ª≠ l√Ω th√†nh c√¥ng',
      redirect: `/result/${videoId}`
    });
    console.log('=== K·∫æT TH√öC X·ª¨ L√ù VIDEO ===\n');
  } catch (error) {
    console.error('‚ùå L·ªñI KHI X·ª¨ L√ù VIDEO:', error);
    res.status(500).json({ error: 'L·ªói khi x·ª≠ l√Ω video' });
  }
});

// Hi·ªÉn th·ªã k·∫øt qu·∫£
router.get('/result/:videoId', async (req, res) => {
  try {
    const { videoId } = req.params;
    const video = await Video.findById(videoId);
    
    if (!video) {
      return res.status(404).render('error', { message: 'Kh√¥ng t√¨m th·∫•y video' });
    }
    
    res.render('result', { 
      video: video,
      marked: marked
    });
  } catch (error) {
    console.error('‚ùå L·ªñI KHI HI·ªÇN TH·ªä TRANG K·∫æT QU·∫¢:', error);
    res.status(500).render('error', { message: 'L·ªói khi hi·ªÉn th·ªã k·∫øt qu·∫£' });
  }
});

// API ƒë·ªÉ l·∫•y chi ti·∫øt transcript t·ª´ m·ªôt √Ω ch√≠nh
router.get('/api/detail/:videoId', async (req, res) => {
  try {
    const { videoId } = req.params;
    const { keyword } = req.query;
    
    if (!keyword) {
      return res.status(400).json({ error: 'Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm' });
    }

    console.log(`\nüîç X·ª≠ l√Ω y√™u c·∫ßu chi ti·∫øt √Ω ch√≠nh: "${keyword}" cho video ID: ${videoId}`);
    
    // G·ªçi service m·ªõi ƒë·ªÉ tri·ªÉn khai √Ω ch√≠nh
    const detail = await detailService.expandKeyPoint(videoId, keyword);
    
    res.json({ 
      success: true, 
      detail: detail
    });
  } catch (error) {
    console.error('‚ùå L·ªñI KHI L·∫§Y CHI TI·∫æT:', error);
    res.status(500).json({ error: 'L·ªói khi l·∫•y chi ti·∫øt √Ω ch√≠nh' });
  }
});

// API ƒë·ªÉ l·∫•y t·∫•t c·∫£ prompts
router.get('/api/prompts', (req, res) => {
  try {
    const promptService = require('../services/promptService');
    res.json({
      success: true,
      prompts: promptService.templates
    });
  } catch (error) {
    console.error('‚ùå L·ªñI KHI L·∫§Y PROMPTS:', error);
    res.status(500).json({ error: 'L·ªói khi l·∫•y danh s√°ch prompts' });
  }
});

// API ƒë·ªÉ t·∫£i l·∫°i prompts t·ª´ file
router.post('/api/prompts/reload', (req, res) => {
  try {
    const promptService = require('../services/promptService');
    const count = promptService.reloadPrompts();
    res.json({
      success: true,
      message: `ƒê√£ t·∫£i l·∫°i ${count} prompts th√†nh c√¥ng`
    });
  } catch (error) {
    console.error('‚ùå L·ªñI KHI T·∫¢I L·∫†I PROMPTS:', error);
    res.status(500).json({ error: 'L·ªói khi t·∫£i l·∫°i prompts' });
  }
});

// API ƒë·ªÉ h·ªèi ƒë√°p v·ªÅ n·ªôi dung video
router.get('/api/ask/:videoId', async (req, res) => {
  try {
    const { videoId } = req.params;
    const { question } = req.query;
    
    if (!question) {
      return res.status(400).json({ error: 'Thi·∫øu c√¢u h·ªèi' });
    }

    // L·∫•y th√¥ng tin video
    const video = await Video.findById(videoId);
    if (!video) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y video' });
    }
    
    // ƒê·∫£m b·∫£o video c√≥ transcript
    if (!video.transcript) {
      return res.status(400).json({ error: 'Video kh√¥ng c√≥ transcript ƒë·ªÉ ph√¢n t√≠ch' });
    }
    
    // G·ªçi service ƒë·ªÉ x·ª≠ l√Ω c√¢u h·ªèi
    const answer = await detailService.answerQuestion(videoId, question);
    
    res.json({ 
      success: true, 
      answer: answer
    });
  } catch (error) {
    console.error('‚ùå L·ªñI KHI X·ª¨ L√ù C√ÇU H·ªéI:', error);
    res.status(500).json({ error: 'L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi' });
  }
});

// Route ƒë·ªÉ hi·ªÉn th·ªã trang x·ª≠ l√Ω video
router.get('/processing/:videoId', async (req, res) => {
  try {
    const { videoId } = req.params;
    const video = await Video.findById(videoId);
    
    if (!video) {
      return res.status(404).render('error', { message: 'Kh√¥ng t√¨m th·∫•y video' });
    }
    
    res.render('processing', { videoId });
  } catch (error) {
    console.error('‚ùå L·ªñI KHI HI·ªÇN TH·ªä TRANG X·ª¨ L√ù:', error);
    res.status(500).render('error', { message: 'L·ªói khi hi·ªÉn th·ªã trang x·ª≠ l√Ω' });
  }
});

// API ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i x·ª≠ l√Ω video
router.get('/api/processing-status/:videoId', async (req, res) => {
  try {
    const { videoId } = req.params;
    const video = await Video.findById(videoId);
    
    if (!video) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y video' });
    }
    
    // X√°c ƒë·ªãnh tr·∫°ng th√°i x·ª≠ l√Ω d·ª±a tr√™n d·ªØ li·ªáu
    let status = 'processing';
    let currentStep = 1;
    let error = null;
    
    // Ki·ªÉm tra tr·∫°ng th√°i d·ª±a tr√™n d·ªØ li·ªáu
    if (video.audio_path) {
      currentStep = 2; // ƒê√£ chuy·ªÉn video sang audio
      
      if (video.transcript) {
        currentStep = 3; // ƒê√£ transcribe
        
        if (video.summary) {
          status = 'completed'; // T·∫•t c·∫£ c√°c b∆∞·ªõc ƒë√£ ho√†n th√†nh
        }
      }
    }
    
    res.json({
      videoId,
      status,
      currentStep,
      error
    });
  } catch (error) {
    console.error('‚ùå L·ªñI KHI KI·ªÇM TRA TR·∫†NG TH√ÅI X·ª¨ L√ù:', error);
    res.status(500).json({ 
      status: 'error', 
      error: 'L·ªói khi ki·ªÉm tra tr·∫°ng th√°i x·ª≠ l√Ω' 
    });
  }
});

module.exports = router; 