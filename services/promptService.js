const fs = require('fs');
const path = require('path');

class PromptService {
  constructor() {
    this.templates = {};
    this.loadTemplates();
  }

  loadTemplates() {
    try {
      const templatesPath = path.join(__dirname, '..', 'prompts', 'templates.json');
      const templateData = fs.readFileSync(templatesPath, 'utf8');
      this.templates = JSON.parse(templateData);
      console.log(`üìù ƒê√£ t·∫£i ${Object.keys(this.templates).length} templates`);
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i templates:', error);
      // Kh·ªüi t·∫°o v·ªõi object r·ªóng n·∫øu c√≥ l·ªói
      this.templates = {};
    }
  }

  getPrompt(templateName, data = {}) {
    // Ki·ªÉm tra xem template c√≥ t·ªìn t·∫°i kh√¥ng
    if (!this.templates[templateName]) {
      console.error(`‚ùå Kh√¥ng t√¨m th·∫•y template: ${templateName}`);
      throw new Error(`Template "${templateName}" kh√¥ng t·ªìn t·∫°i`);
    }

    // L·∫•y template content - ki·ªÉm tra c·∫£ tr∆∞·ªùng h·ª£p template l√† object ho·∫∑c string
    let templateContent;
    if (typeof this.templates[templateName] === 'object' && this.templates[templateName].template) {
      templateContent = this.templates[templateName].template;
    } else if (typeof this.templates[templateName] === 'string') {
      templateContent = this.templates[templateName];
    } else {
      throw new Error(`Template "${templateName}" kh√¥ng c√≥ n·ªôi dung h·ª£p l·ªá`);
    }

    // Thay th·∫ø c√°c placeholder trong template
    let prompt = templateContent;
    
    // Duy·ªát qua t·∫•t c·∫£ c√°c kh√≥a trong data v√† thay th·∫ø v√†o template
    for (const key in data) {
      if (data[key] === undefined || data[key] === null) {
        data[key] = ''; // ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† chu·ªói r·ªóng n·∫øu gi√° tr·ªã l√† undefined ho·∫∑c null
      }
      
      // ƒê·∫£m b·∫£o data[key] l√† string tr∆∞·ªõc khi g·ªçi replace
      const value = String(data[key]);
      const placeholder = new RegExp(`{{${key}}}`, 'g');
      prompt = prompt.replace(placeholder, value);
    }

    return prompt;
  }

  // Th√™m method cho ph√©p reload templates t·ª´ file
  reloadPrompts() {
    console.log('üîÑ ƒêang t·∫£i l·∫°i prompt templates...');
    this.loadTemplates();
    return Object.keys(this.templates).length;
  }
}

module.exports = new PromptService(); 