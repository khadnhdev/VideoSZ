const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// T·∫°o th∆∞ m·ª•c uploads n·∫øu ch∆∞a t·ªìn t·∫°i
const uploadDir = path.join('public', 'uploads');
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
  console.log('ƒê√£ t·∫°o th∆∞ m·ª•c uploads');
}

// T·∫°o th∆∞ m·ª•c prompts n·∫øu ch∆∞a t·ªìn t·∫°i
const promptsDir = path.join(__dirname, 'prompts');
if (!fs.existsSync(promptsDir)) {
  fs.mkdirSync(promptsDir, { recursive: true });
  console.log('ƒê√£ t·∫°o th∆∞ m·ª•c prompts');
}

// C√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt
console.log('ƒêang c√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt...');
try {
  execSync('npm install ffmpeg-static@latest', { stdio: 'inherit' });
  console.log('ƒê√£ c√†i ƒë·∫∑t ffmpeg-static th√†nh c√¥ng');
} catch (error) {
  console.error('L·ªói khi c√†i ƒë·∫∑t ffmpeg-static:', error);
}

// Ki·ªÉm tra v√† t·∫°o file .env n·∫øu ch∆∞a t·ªìn t·∫°i
const envPath = path.join(__dirname, '.env');
const envExamplePath = path.join(__dirname, '.env.example');

if (!fs.existsSync(envPath) && fs.existsSync(envExamplePath)) {
  fs.copyFileSync(envExamplePath, envPath);
  console.log('ƒê√£ t·∫°o file .env t·ª´ m·∫´u. Vui l√≤ng c·∫≠p nh·∫≠t API keys c·ªßa b·∫°n.');
}

// Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn OpenAI
if (fs.existsSync(envPath)) {
  try {
    require('dotenv').config();
    if (process.env.OPENAI_API_KEY) {
      console.log('‚úÖ T√¨m th·∫•y OpenAI API key, ƒëang ki·ªÉm tra k·∫øt n·ªëi...');
      
      const OpenAI = require('openai');
      const openAIConfig = {
        apiKey: process.env.OPENAI_API_KEY,
      };
      
      if (process.env.OPENAI_API_ENDPOINT) {
        openAIConfig.baseURL = process.env.OPENAI_API_ENDPOINT;
        console.log(`üîó S·ª≠ d·ª•ng OpenAI API endpoint t√πy ch·ªânh: ${process.env.OPENAI_API_ENDPOINT}`);
      }
      
      const openai = new OpenAI(openAIConfig);
      
      // Ch·ªâ log th√¥ng tin, kh√¥ng th·ª±c hi·ªán API call trong qu√° tr√¨nh setup
      console.log('‚öôÔ∏è ƒê√£ c·∫•u h√¨nh OpenAI client th√†nh c√¥ng');
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫•u h√¨nh OpenAI:', error);
  }
}

console.log('Qu√° tr√¨nh thi·∫øt l·∫≠p ho√†n t·∫•t. H√£y ch·∫°y "npm start" ƒë·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng'); 